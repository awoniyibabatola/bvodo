{
  "permissions": {
    "allow": [
      "Bash(dir:*)",
      "Bash(npm install:*)",
      "Bash(npx prisma migrate:*)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(taskkill:*)",
      "Bash(npx kill-port:*)",
      "Bash(timeout /t 3)",
      "Bash(if exist .next rmdir /s /q .next)",
      "Bash(findstr \"^\\.env\")",
      "Bash(node -e \"\nconst Amadeus = require(''amadeus'');\n\nconst amadeus = new Amadeus({\n  clientId: ''VNIRyAAPIOqFLw1CVcEnRP5jis5ZTGW1'',\n  clientSecret: ''gMSoGk89bGAJfRFC'',\n  hostname: ''production''\n});\n\nconsole.log(''Testing Amadeus Production API credentials...\\n'');\n\namadeus.referenceData.locations.hotels.byCity.get({\n  cityCode: ''PAR''\n})\n.then(response => {\n  console.log(''✅ SUCCESS! Production credentials are working!'');\n  console.log(''Found'', response.data.length, ''hotels'');\n})\n.catch(error => {\n  console.log(''❌ ERROR! Production credentials are NOT working!\\n'');\n  console.log(''Status Code:'', error.response?.statusCode || error.code);\n  console.log(''Error:'', JSON.stringify(error.response?.body || error.message, null, 2));\n});\n\")",
      "Bash(node -e \"const data=require(''''fs'''').readFileSync(0,''''utf-8''''); const json=JSON.parse(data); console.log(''''Number of offers:'''', json.data.offers.length); console.log(''''Sample offer:'''', JSON.stringify(json.data.offers[0], null, 2).substring(0, 1000));\")",
      "Bash(node -e \"const data=require(''''fs'''').readFileSync(0,''''utf-8''''); const json=JSON.parse(data); console.log(''''Hotel data:'''', JSON.stringify(json.data.hotel, null, 2));\")",
      "Bash(node -e \"const data=require(''''fs'''').readFileSync(0,''''utf-8''''); const json=JSON.parse(data); console.log(''''Total offers:'''', json.data.offers.length);\")",
      "WebFetch(domain:developers.amadeus.com)",
      "WebSearch",
      "Bash(findstr \"^GOOGLE_MAPS\" .env)",
      "Bash(timeout /t 5)",
      "Bash(if exist node_modulesreact-leaflet rmdir /s /q node_modulesreact-leaflet)",
      "Bash(if exist node_modules@react-leaflet rmdir /s /q node_modules@react-leaflet)",
      "Bash(findstr /s /i \"room\" srcroutes*.js)",
      "Bash(findstr /i \"typeEstimated\\|description\\|category\")",
      "Bash(findstr \"AMADEUS_ENVIRONMENT\" .env)",
      "Bash(findstr \"ANTHROPIC\" backend/.env)",
      "Bash(findstr \"ANTHROPIC\" .env)",
      "Bash(npx tsc --noEmit \"src/app/dashboard/hotels/[id]/page.tsx\")",
      "Bash(findstr \"GOOGLE\" backend/.env)",
      "Bash(npx prisma generate)",
      "Bash(npx ts-node --transpile-only src/controllers/booking.controller.ts)",
      "Bash(findstr /n \"model HotelBooking\" backendprismaschema.prisma)",
      "Bash(node add-credits.js)",
      "Bash(findstr /n \"export\" auth.middleware.ts)",
      "Bash(cat -A)",
      "Bash(if exist node_modules.cache rmdir /s /q node_modules.cache)",
      "Bash(powershell -Command \"if (Test-Path frontend\\.next) { Remove-Item -Recurse -Force frontend\\.next }\")",
      "Bash(npx tsc --noEmit \"src/app/page.tsx\")",
      "Bash(powershell -Command \"if (Test-Path .next) { Remove-Item -Recurse -Force .next }; if (Test-Path node_modules\\.cache) { Remove-Item -Recurse -Force node_modules\\.cache }\")",
      "Bash(npx tsc --noEmit \"src/app/dashboard/approvals/page.tsx\")",
      "Bash(node -e \"const fs = require(''fs''); const content = fs.readFileSync(''src/app/dashboard/approvals/page.tsx'', ''utf8''); const lines = content.split(''\\n''); lines.forEach((line, i) => { if (line.includes(''filteredBookings.map'')) console.log((i+1) + '': '' + line); });\")",
      "Bash(powershell -Command \"if (Test-Path .next) { Remove-Item -Recurse -Force .next }\")",
      "Bash(findstr \"DATABASE_URL\" backend/.env.production)",
      "Bash(tasklist /FI \"IMAGENAME eq node.exe\" /FO TABLE)",
      "Bash(findstr \"DATABASE_URL\")",
      "Bash(git commit:*)",
      "Bash(git add:*)",
      "Bash(findstr:*)",
      "Bash(git log:*)",
      "Bash(git push)",
      "Bash(npx tsc:*)",
      "Bash(node -e:*)",
      "Bash(powershell -Command:*)",
      "Bash(timeout /t 10)"
    ],
    "deny": [],
    "ask": []
  }
}
